---
import { useTranslations, type Languages } from "@i18n/index";
import { cubeNear, logo } from "src/assets";

const { lang } = Astro.params;
const t = useTranslations(lang as Languages, "hero");
---

<section
  class="relative min-h-dvh 3xl:min-h-[920px] 2xl:min-h-[780px] lg:min-h-[620px] pt-[136px] flex"
>
  <video
    autoplay
    muted
    loop
    preload="auto"
    onloadeddata="this.classList.add('opacity-anim')"
    class="opacity-0 absolute -z-10 top-0 inset-x-0 bg-black bg-opacity-45 h-full w-full object-cover transition-opacity duration-1000 ease-out"
  >
    <source src={cubeNear} type="video/mp4; codecs=avc1.42E01E,mp4a.40.2" />
  </video>
  <div class="max-w-[1616px] h-full w-full my-auto mx-auto px-4 md:px-8">
    <div
      class:list={[
        "flex flex-col lg:flex-row lg:justify-between",
        "gap-y-16 md:gap-y-20 gap-x-6",
        "lg:px-6",
      ]}
    >
      <figure
        class:list={[
          "h-[112px] md:h-[220px] lg:h-[140px] xl:h-[200px] 2xl:h-[240px] my-auto",
          "mx-auto lg:mx-0",
        ]}
      >
        <img class="h-full" src={logo.src} alt="logo" />
      </figure>

      <article
        class:list={[
          "xl:max-w-[520px] lg:max-w-[380px] w-full",
          "flex flex-col justify-between",
          "gap-y-6 md:gap-y-10 lg:gap-y-4",
        ]}
      >
        <div
          class="font-extrabold text-center lg:text-start font-asket800"
          class:list={["text-24 md:text-32 lg:text-24 xl:text-32 2xl:text-40"]}
        >
          <h5 class="text-brand-white mb-3 uppercase">{t("title")}</h5>
          <h5>
            <span
              id="hero-change-text"
              class="empty uppercase"
              data-text-range={t("subTitleRange")}
            >
              {t("subTitle")}
            </span>
          </h5>
        </div>
        <p
          class:list={[
            "font-gothic tracking-0.8 text-brand-white",
            "md:text-20 md:tracking-1 lg:text-base xl:text-20",
          ]}
          class="text-center lg:text-start"
        >
          {t("descripton")}
        </p>
      </article>
    </div>
  </div>
</section>

<script is:inline>
  const colors = [
    "text-brand-beigeLight",
    "text-brand-beige",
    "text-brand-gray",
  ];
  const text = document.querySelector("#hero-change-text");
  const range = text.getAttribute("data-text-range");
  const words = range?.split(",") || [];

  // Generator (iterate from 0-3)
  function* generator() {
    var index = 0;
    while (true) {
      yield index++;

      if (index > words.length - 1) {
        index = 0;
      }
    }
  }

  // Printing effect
  function printChar(word) {
    let i = 0;
    text.innerHTML = "";
    text.classList.add(colors[words.indexOf(word)] || colors[1]);
    let id = setInterval(() => {
      if (i >= word?.length) {
        deleteChar();
        clearInterval(id);
      } else {
        text.innerHTML += word[i];
        i++;
      }
    }, 200);
  }

  // Deleting effect
  function deleteChar() {
    let word = text.innerHTML;
    let i = word.length - 1;
    let id = setInterval(() => {
      if (i >= 0) {
        text.innerHTML = text.innerHTML.substring(0, text.innerHTML.length - 1);
        i--;
      } else {
        text.classList.remove(colors[words.indexOf(word)]);
        printChar(words[gen.next().value]);
        clearInterval(id);
      }
    }, 100);
  }

  // Initializing generator
  let gen = generator();

  printChar(words[gen.next().value]);

  // function showVideo() {
  //   const video = document.querySelector("video");
  //   setTimeout(() => {
  //     video.classList.add("opacity-anim");
  //   }, 1);
  // }
</script>

<style is:global>
  .empty::after {
    content: "\00a0";
    visibility: hidden;
  }

  .opacity-anim {
    opacity: 1;
  }
</style>
