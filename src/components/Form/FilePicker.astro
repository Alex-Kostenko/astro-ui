---
interface Props {
  name?: string;
  accept?: string;
  label?: string;
}

const { name, accept = "*", label } = Astro.props;
---

<file-pick class="flex items-center gap-x-2">
  <input name={name} type="file" accept={accept} class="hidden" />

  <button
    type="button"
    class:list={[
      "border-2 border-brand-white rounded ",
      "px-3 py-1",
      "text-12 text-brand-white",
    ]}
  >
    Add File
  </button>
  <span class="text-brand-white font-gothic text-14">{label}</span>
</file-pick>

<script>
  class FilePicker extends HTMLElement {
    labelText: string | null = "";
    connectedCallback() {
      const button = this.querySelector("button") as HTMLButtonElement;
      const input = this.querySelector("input") as HTMLInputElement;
      const label = this.querySelector("span") as HTMLSpanElement;
      this.labelText = label.textContent;
      button.onclick = function () {
        input.click();
      };

      input.onchange = function (e: Event) {
        const target = e.target as HTMLInputElement;
        const files = target.files;
        if (files && files.length > 0) {
          const sizeInMB = files[0].size / (1000 * 1000);
          label.textContent = files[0].name + ` [ ${sizeInMB.toFixed(1)} MB ]`;
        }
      };
    }
  }

  customElements.define("file-pick", FilePicker);
</script>
