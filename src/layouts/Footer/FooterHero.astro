---
import { useTranslations, type Languages } from "@i18n/index";
import { cubeNear, logo } from "src/assets";

const { lang } = Astro.params;
const t = useTranslations(lang as Languages, "hero");
---

<section
  class="relative 2xl:min-h-[680px] xl:min-h-[680px] min-h-[560px] flex items-center"
>
  <video
    autoplay
    muted
    loop
    class="absolute -z-10 top-0 inset-x-0 bg-black bg-opacity-45 h-full w-full object-cover"
  >
    <source src={cubeNear} type="video/mp4" />
  </video>
  <div class="max-w-[1616px] h-full w-full mx-auto my-auto 2xl:px-[112px]">
    <div
      class="flex flex-col 2xl:flex-row-reverse 2xl:justify-between gap-x-6 h-full w-full"
      class:list={["gap-y-16 md:gap-y-12"]}
    >
      <figure
        class:list={[
          "h-[112px] md:h-[180px] 2xl:h-[240px]",
          "mx-auto 2xl:mx-0",
        ]}
      >
        <img class="h-full" src={logo.src} alt="logo" />
      </figure>

      <article
        class="2xl:max-w-[520px] w-full flex flex-col 2xl:gap-y-3 gap-y-10 justify-center"
      >
        <div
          class="text-24 md:text-32 2xl:text-40 font-extrabold text-center 2xl:text-start"
        >
          <h5 class="text-brand-white mb-3">{t("title")}</h5>
          <h5 class="text-brand-beigeLight">
            <span
              id="footer-change-text"
              class="empty uppercase"
              data-text-range={t("subTitleRange")}
            >
              {t("subTitle")}</span
            >
          </h5>
        </div>
      </article>
    </div>
  </div>
</section>

<script>
  const colors = [
    "text-brand-beigeLight",
    "text-brand-beige",
    "text-brand-gray",
  ];
  const text = document.querySelector("#footer-change-text") as HTMLSpanElement;
  const range = text.getAttribute("data-text-range");
  const words = range?.split(",") || [];

  // Generator (iterate from 0-3)
  function* generator(): Generator<number> {
    var index = 0;
    while (true) {
      yield index++;

      if (index > words.length - 1) {
        index = 0;
      }
    }
  }

  // Printing effect
  function printChar(word: string) {
    let i = 0;
    text.innerHTML = "";
    text.classList.add(colors[words.indexOf(word)] || colors[1]);
    let id = setInterval(() => {
      if (i >= word?.length) {
        deleteChar();
        clearInterval(id);
      } else {
        text.innerHTML += word[i];
        i++;
      }
    }, 200);
  }

  function deleteChar() {
    let word = text.innerHTML;
    let i = word.length - 1;
    let id = setInterval(() => {
      if (i >= 0) {
        text.innerHTML = text.innerHTML.substring(0, text.innerHTML.length - 1);
        i--;
      } else {
        text.classList.remove(colors[words.indexOf(word)]);
        printChar(words[gen.next().value]);
        clearInterval(id);
      }
    }, 100);
  }

  let gen = generator();

  printChar(words[gen.next().value]);
</script>

<style is:global>
  .empty::after {
    content: "\00a0";
    visibility: hidden;
  }
</style>
