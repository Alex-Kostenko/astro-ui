---
import Layout from "@layouts/Layout.astro";
import {
  languages,
  useTranslations,
  type Language,
  type Languages,
} from "@i18n/index";
import ContactUsSection from "@components/Form/ContactUsSection.astro";
import serviceService from "@service/service.service";

import {
  TestimonialsSection,
  CasesSection,
  DescriptionSection,
  AboutServiceSection,
  StepsSection,
  HeroTabsSection,
} from "@components/Sections";
import { cubeNear, cubeNearVP9 } from "@assets/index";
import type { IService } from "@interfaces/service";
import type { GetStaticPaths } from "astro";

export const getStaticPaths = (async () => {
  const projectService: IService[] = [
    ...(await serviceService.getService()).data,
    {
      slug: "all",
      documentId: "",
      createdAt: "",
      id: 0,
      locale: "en",
      name: "all",
      publishedAt: "",
      updatedAt: "",
    },
  ];

  const requestProjects = Object.keys(languages).flatMap((lang) =>
    projectService.map((service) =>
      serviceService
        .get({
          pagination: { limit: "max" },
          locale: languages[lang].lang,
          filter:
            service.id !== 0
              ? [
                  {
                    fields: ["services", "documentId"],
                    value: service.documentId,
                  },
                ]
              : [],
        })
        .then((response) => {
          return {
            lang: languages[lang] as Language,
            case: service,
            response,
          };
        }),
    ),
  );

  const responses = await Promise.all(requestProjects);

  return responses.flatMap((v) => {
    return {
      params: { lang: v.lang.slug, case: v.case.slug },
      props: {
        meta: v.response.meta,
        slug: v.case.slug,
        data: v.response.data,
      },
    };
  });
}) satisfies GetStaticPaths;

const { lang } = Astro.params;
const { slug, data } = Astro.props;

const t = useTranslations(lang as Languages, "service.contactUs");

const text = t("text").map((t: string, i: number) => {
  if (i === 2) {
    return { text: t, alight: "none", variant: "outlined" };
  }
  return { text: t, alight: "none", variant: "contained" };
});
---

<Layout title="UniCode Service">
  <link
    slot="head"
    rel="preload stylesheet"
    as="style"
    type="text/css"
    href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"
  />
  <main>
    <div class="relative h-[420px] lg:h-[480px] bg-black bg-opacity-45">
      <video
        autoplay
        muted
        loop
        preload="auto"
        class="relative -z-10 bg-black bg-opacity-45 h-full w-full object-cover"
      >
        <track kind="captions" src="/captions/empty_captions.vtt" />
        <source src={cubeNear} type="video/mp4; codecs=avc1.42E01E,mp4a.40.2" />
        <source src={cubeNearVP9} type="video/mp4" />
      </video>
      <HeroTabsSection domain={slug} />
    </div>
    <div class="flex flex-col gap-[120px]">
      <DescriptionSection />
      <AboutServiceSection />
      <StepsSection />
      <TestimonialsSection />
      <CasesSection data={data} />
      <ContactUsSection text={text} />
    </div>
  </main>
</Layout>
